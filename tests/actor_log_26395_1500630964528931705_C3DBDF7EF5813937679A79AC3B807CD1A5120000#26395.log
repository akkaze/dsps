1500630964528979684 caf INFO  actor0 139860382881568 caf.logger start logger.cpp:394 level = TRACE, node = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395
1500630964522511693 caf TRACE actor0 139860382881568 caf.intrusive_ptr<caf.node_id.data>%20caf.node_id.data create_singleton node_id.cpp:145 ENTRY 
1500630964522636399 caf TRACE actor0 139860382881568 caf.node_id.data create_singleton node_id.cpp:145 EXIT
1500630964522647852 caf TRACE actor0 139860382881568 caf.group_manager init group_manager.cpp:434 ENTRY 
1500630964522654568 caf TRACE actor0 139860382881568 caf.{anonymous}.local_group_module local_group_module group_manager.cpp:325 ENTRY 
1500630964522659889 caf TRACE actor0 139860382881568 caf.{anonymous}.local_group_module local_group_module group_manager.cpp:325 EXIT
1500630964522671282 caf TRACE actor0 139860382881568 caf.group_manager init group_manager.cpp:434 EXIT
1500630964522690791 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 1 ; ARGS = (actor_config)
1500630964522713806 caf TRACE actor0 139860382881568 caf.scheduled_actor launch scheduled_actor.cpp:166 ENTRY lazy = true, hide = true
1500630964522718582 caf TRACE actor0 139860382881568 caf.scheduled_actor launch scheduled_actor.cpp:166 EXIT
1500630964522724843 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 2 ; ARGS = (actor_config)
1500630964522731770 caf TRACE actor0 139860382881568 caf.scheduled_actor launch scheduled_actor.cpp:166 ENTRY lazy = true, hide = true
1500630964522735536 caf TRACE actor0 139860382881568 caf.scheduled_actor launch scheduled_actor.cpp:166 EXIT
1500630964522745609 caf TRACE actor0 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 ENTRY 
1500630964522755437 caf DEBUG actor0 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:52 cannot attach functor to terminated actor: call immediately
1500630964522760315 caf TRACE actor0 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 EXIT
1500630964522767159 caf TRACE actor0 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 ENTRY 
1500630964522771251 caf DEBUG actor0 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:52 cannot attach functor to terminated actor: call immediately
1500630964522775184 caf TRACE actor0 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 EXIT
1500630964523895943 caf TRACE actor0 139860382881568 caf.scheduler.abstract_coordinator start abstract_coordinator.cpp:323 ENTRY 
1500630964523908710 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 3 ; ARGS = (actor_config)
1500630964523921431 caf TRACE actor0 139860382881568 caf.blocking_actor launch blocking_actor.cpp:87 ENTRY hide = true
1500630964523977122 caf TRACE actor0 139860382881568 caf.blocking_actor launch blocking_actor.cpp:87 EXIT
1500630964523987963 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 4 ; ARGS = (actor_config)
1500630964523994693 caf TRACE actor0 139860382881568 caf.blocking_actor launch blocking_actor.cpp:87 ENTRY hide = true
1500630964524042629 caf TRACE actor0 139860382881568 caf.blocking_actor launch blocking_actor.cpp:87 EXIT
1500630964524050034 caf TRACE actor0 139860382881568 caf.scheduler.abstract_coordinator start abstract_coordinator.cpp:323 EXIT
1500630964524063054 caf TRACE actor0 139860382881568 caf.io.middleman start middleman.cpp:253 ENTRY 
1500630964524129318 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 5 ; ARGS = (actor_config)
1500630964524147175 caf TRACE actor0 139860382881568 caf.io.abstract_broker launch abstract_broker.cpp:52 ENTRY lazy = false, hide = true
1500630964524156694 caf TRACE actor0 139860382881568 caf.io.abstract_broker launch abstract_broker.cpp:52 EXIT
1500630964524178776 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 6 ; ARGS = (actor_config, 5@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395)
1500630964524190669 caf TRACE actor0 139860382881568 caf.scheduled_actor launch scheduled_actor.cpp:166 ENTRY lazy = false, hide = true
1500630964524240941 caf TRACE actor0 139860382881568 caf.scheduled_actor launch scheduled_actor.cpp:166 EXIT
1500630964524250129 caf TRACE actor0 139860382881568 caf.io.middleman start middleman.cpp:253 EXIT
1500630964524255835 caf TRACE actor0 139860382881568 caf.group_manager start group_manager.cpp:445 ENTRY 
1500630964524259752 caf TRACE actor0 139860382881568 caf.group_manager start group_manager.cpp:445 EXIT
1500630964524325021 caf DEBUG actor0 139860382881568 caf.actor_system ~actor_system actor_system.cpp:276 shutdown actor system
1500630964524339135 caf TRACE actor0 139860382881568 caf.actor_registry await_running_count_equal actor_registry.cpp:114 ENTRY expected = 0
1500630964524345610 caf TRACE actor0 139860382881568 caf.actor_registry await_running_count_equal actor_registry.cpp:114 EXIT
1500630964524358582 caf TRACE actor0 139860382881568 caf anon_send_exit send.hpp:86 ENTRY dest = 1@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = user_shutdown
1500630964524398490 caf TRACE actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:124 ENTRY *ptr = mailbox_element(0@invalid-node, message_id(0), (exit_msg(1@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964524414329 se-0001 DEBUG actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:125 SEND ; TO = 1@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(1@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964524419089 se-0001 DEBUG actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:130 ACCEPT
1500630964524423822 caf TRACE actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:124 EXIT
1500630964524430504 caf TRACE actor0 139860382881568 caf anon_send_exit send.hpp:86 EXIT
1500630964524437876 caf TRACE actor0 139860382881568 caf anon_send_exit send.hpp:86 ENTRY dest = 2@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = user_shutdown
1500630964524449449 caf TRACE actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:124 ENTRY *ptr = mailbox_element(0@invalid-node, message_id(0), (exit_msg(2@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964524465412 se-0001 DEBUG actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:125 SEND ; TO = 2@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(2@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964524469668 se-0001 DEBUG actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:130 ACCEPT
1500630964524474198 caf TRACE actor0 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:124 EXIT
1500630964524478338 caf TRACE actor0 139860382881568 caf anon_send_exit send.hpp:86 EXIT
1500630964524484803 caf TRACE actor0 139860382881568 caf.group_manager stop group_manager.cpp:449 ENTRY 
1500630964524492156 caf TRACE actor0 139860382881568 caf.{anonymous}.local_group_module stop group_manager.cpp:389 ENTRY 
1500630964524499487 caf TRACE actor0 139860382881568 caf.{anonymous}.local_group_module stop group_manager.cpp:389 EXIT
1500630964524503968 caf TRACE actor0 139860382881568 caf.group_manager stop group_manager.cpp:449 EXIT
1500630964524511878 caf TRACE actor0 139860382881568 caf.io.middleman stop middleman.cpp:276 ENTRY 
1500630964527119329 caf TRACE actor2 139860348282624 caf.scheduled_actor activate scheduled_actor.cpp:503 ENTRY 
1500630964527148495 caf TRACE actor2 139860348282624 caf.event_based_actor initialize event_based_actor.cpp:34 ENTRY subtype = caf.stateful_actor<caf.(anonymous%20namespace).kvstate,%20caf.event_based_actor>
1500630964527157143 caf TRACE actor2 139860348282624 caf.event_based_actor make_behavior event_based_actor.cpp:48 ENTRY 
1500630964527163190 caf TRACE actor2 139860348282624 caf.{anonymous} config_serv_impl actor_system.cpp:59 ENTRY 
1500630964527169562 caf TRACE actor2 139860348282624 caf.{anonymous} config_serv_impl actor_system.cpp:59 EXIT
1500630964527173966 caf TRACE actor2 139860348282624 caf.event_based_actor make_behavior event_based_actor.cpp:48 EXIT
1500630964527178241 caf DEBUG actor2 139860348282624 caf.event_based_actor initialize event_based_actor.cpp:41 make_behavior() did return a valid behavior
1500630964527186582 se-0001 DEBUG actor2 139860348282624 caf.local_actor initialize local_actor.cpp:177 INIT ; NAME = config_server ; HIDDEN = true
1500630964527190974 caf TRACE actor2 139860348282624 caf.event_based_actor initialize event_based_actor.cpp:34 EXIT
1500630964527199288 caf DEBUG actor2 139860348282624 caf.scheduled_actor activate scheduled_actor.cpp:524 initialized actor: name() = "config_server"
1500630964527203514 caf TRACE actor2 139860348282624 caf.scheduled_actor activate scheduled_actor.cpp:503 EXIT
1500630964527222129 caf TRACE actor2 139860348282624 caf.scheduled_actor reactivate scheduled_actor.cpp:551 ENTRY x = mailbox_element(0@invalid-node, message_id(0), (exit_msg(2@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964527234934 caf TRACE actor2 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:379 ENTRY x = mailbox_element(0@invalid-node, message_id(0), (exit_msg(2@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964527246428 se-0001 DEBUG actor2 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:381 RECEIVE ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(2@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964527260076 caf DEBUG actor2 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:418 handled system message
1500630964527264889 caf TRACE actor2 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:379 EXIT
1500630964527269350 caf DEBUG actor2 139860348282624 caf.scheduled_actor finalize scheduled_actor.cpp:599 actor either has no behavior or has set an exit reason
1500630964527278154 caf TRACE actor2 139860348282624 caf.stateful_actor<State,%20Base> on_exit stateful_actor.hpp:57 ENTRY 
1500630964527285099 caf TRACE actor2 139860348282624 Base> on_exit stateful_actor.hpp:57 EXIT
1500630964527358555 caf TRACE actor2 139860348282624 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = error(4, 'exit')
1500630964527370994 caf TRACE actor2 139860348282624 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = error(4, 'exit')
1500630964527384187 caf INFO  actor2 139860348282624 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 2, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = error(4, 'exit')
1500630964527389925 caf TRACE actor2 139860348282624 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964527395655 se-0001 DEBUG actor2 139860348282624 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = error(4, 'exit')
1500630964527399930 caf TRACE actor2 139860348282624 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964527403961 caf DEBUG actor2 139860348282624 caf.scheduled_actor reactivate scheduled_actor.cpp:561 actor finalized
1500630964527408079 caf TRACE actor2 139860348282624 caf.scheduled_actor reactivate scheduled_actor.cpp:551 EXIT
1500630964527431067 caf TRACE actor1 139860348282624 caf.scheduled_actor activate scheduled_actor.cpp:503 ENTRY 
1500630964527444822 caf TRACE actor1 139860348282624 caf.event_based_actor initialize event_based_actor.cpp:34 ENTRY subtype = caf.stateful_actor<caf.(anonymous%20namespace).spawn_serv_state,%20caf.event_based_actor>
1500630964527458163 caf TRACE actor1 139860348282624 caf.event_based_actor make_behavior event_based_actor.cpp:48 ENTRY 
1500630964527466715 caf TRACE actor1 139860348282624 caf.{anonymous} spawn_serv_impl actor_system.cpp:155 ENTRY 
1500630964527475462 caf TRACE actor1 139860348282624 caf.{anonymous} spawn_serv_impl actor_system.cpp:155 EXIT
1500630964527483526 caf TRACE actor1 139860348282624 caf.event_based_actor make_behavior event_based_actor.cpp:48 EXIT
1500630964527491010 caf DEBUG actor1 139860348282624 caf.event_based_actor initialize event_based_actor.cpp:41 make_behavior() did return a valid behavior
1500630964527500257 se-0001 DEBUG actor1 139860348282624 caf.local_actor initialize local_actor.cpp:177 INIT ; NAME = spawn_server ; HIDDEN = true
1500630964527508219 caf TRACE actor1 139860348282624 caf.event_based_actor initialize event_based_actor.cpp:34 EXIT
1500630964527515434 caf DEBUG actor1 139860348282624 caf.scheduled_actor activate scheduled_actor.cpp:524 initialized actor: name() = "spawn_server"
1500630964527519752 caf TRACE actor1 139860348282624 caf.scheduled_actor activate scheduled_actor.cpp:503 EXIT
1500630964527533362 caf TRACE actor1 139860348282624 caf.scheduled_actor reactivate scheduled_actor.cpp:551 ENTRY x = mailbox_element(0@invalid-node, message_id(0), (exit_msg(1@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964527544266 caf TRACE actor1 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:379 ENTRY x = mailbox_element(0@invalid-node, message_id(0), (exit_msg(1@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964527553650 se-0001 DEBUG actor1 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:381 RECEIVE ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(1@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964527562638 caf DEBUG actor1 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:418 handled system message
1500630964527567107 caf TRACE actor1 139860348282624 caf.scheduled_actor consume scheduled_actor.cpp:379 EXIT
1500630964527571193 caf DEBUG actor1 139860348282624 caf.scheduled_actor finalize scheduled_actor.cpp:599 actor either has no behavior or has set an exit reason
1500630964527576606 caf TRACE actor1 139860348282624 caf.stateful_actor<State,%20Base> on_exit stateful_actor.hpp:57 ENTRY 
1500630964527580751 caf TRACE actor1 139860348282624 Base> on_exit stateful_actor.hpp:57 EXIT
1500630964527587930 caf TRACE actor1 139860348282624 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = error(4, 'exit')
1500630964527594513 caf TRACE actor1 139860348282624 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = error(4, 'exit')
1500630964527603390 caf INFO  actor1 139860348282624 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 1, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = error(4, 'exit')
1500630964527608544 caf TRACE actor1 139860348282624 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964527613755 se-0001 DEBUG actor1 139860348282624 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = error(4, 'exit')
1500630964527617867 caf TRACE actor1 139860348282624 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964527621843 caf DEBUG actor1 139860348282624 caf.scheduled_actor reactivate scheduled_actor.cpp:561 actor finalized
1500630964527741932 caf TRACE actor1 139860348282624 caf.scheduled_actor reactivate scheduled_actor.cpp:551 EXIT
1500630964527799953 se-0001 DEBUG actor3 139860316813056 caf.local_actor initialize local_actor.cpp:177 INIT ; NAME = timer_actor ; HIDDEN = true
1500630964527818075 caf TRACE actor3 139860316813056 caf.blocking_actor receive_impl blocking_actor.cpp:317 ENTRY mid = message_id(0)
1500630964527849873 se-0001 DEBUG actor4 139860306323200 caf.local_actor initialize local_actor.cpp:177 INIT ; NAME = printer_actor ; HIDDEN = true
1500630964527881293 caf TRACE actor4 139860306323200 caf.blocking_actor receive_impl blocking_actor.cpp:317 ENTRY mid = message_id(0)
1500630964527917511 caf TRACE actor0 139860295833344 caf.io.middleman operator() middleman.cpp:266 ENTRY 
1500630964527928661 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer run default_multiplexer.cpp:319 ENTRY epoll()-based multiplexer
1500630964527939337 caf DEBUG actor0 139860295833344 caf.io.network.default_multiplexer run default_multiplexer.cpp:325 epoll_wait() on  shadow_ = 1  sockets reported  presult = 1  event(s)
1500630964527949475 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle_socket_event default_multiplexer.cpp:669 ENTRY fd = 4, mask = 1
1500630964527958416 caf TRACE actor0 139860295833344 caf.io.network.pipe_reader handle_event default_multiplexer.cpp:1039 ENTRY op = read
1500630964527968322 caf TRACE actor5 139860295833344 caf.scheduled_actor activate scheduled_actor.cpp:503 ENTRY 
1500630964527981362 caf TRACE actor5 139860295833344 caf.io.broker initialize broker.cpp:37 ENTRY 
1500630964527986695 caf TRACE actor5 139860295833344 caf.io.abstract_broker init_broker abstract_broker.cpp:220 ENTRY 
1500630964527991065 caf TRACE actor5 139860295833344 caf.io.abstract_broker init_broker abstract_broker.cpp:220 EXIT
1500630964528012709 caf TRACE actor5 139860295833344 caf.io.basp_broker make_behavior basp_broker.cpp:478 ENTRY system().node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395
1500630964528019799 caf TRACE actor5 139860295833344 caf.io.basp_broker make_behavior basp_broker.cpp:478 EXIT
1500630964528027674 caf DEBUG actor5 139860295833344 caf.io.broker initialize broker.cpp:44 make_behavior() did return a valid behavior
1500630964528033136 caf TRACE actor5 139860295833344 caf.io.broker initialize broker.cpp:37 EXIT
1500630964528039422 caf DEBUG actor5 139860295833344 caf.scheduled_actor activate scheduled_actor.cpp:524 initialized actor: name() = "basp_broker"
1500630964528043224 caf TRACE actor5 139860295833344 caf.scheduled_actor activate scheduled_actor.cpp:503 EXIT
1500630964528048647 caf TRACE actor0 139860295833344 caf.io.network.pipe_reader handle_event default_multiplexer.cpp:1039 EXIT
1500630964528053142 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle_socket_event default_multiplexer.cpp:669 EXIT
1500630964528060174 caf DEBUG actor0 139860295833344 caf.io.network.default_multiplexer run default_multiplexer.cpp:325 epoll_wait() on  shadow_ = 1  sockets reported  presult = 1  event(s)
1500630964528065892 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle_socket_event default_multiplexer.cpp:669 ENTRY fd = 4, mask = 1
1500630964528070685 caf TRACE actor0 139860295833344 caf.io.network.pipe_reader handle_event default_multiplexer.cpp:1039 ENTRY op = read
1500630964528076718 caf TRACE actor0 139860295833344 caf.io.middleman operator() middleman.cpp:278 ENTRY 
1500630964528081974 caf DEBUG actor0 139860295833344 caf.scheduled_actor finalize scheduled_actor.cpp:599 actor either has no behavior or has set an exit reason
1500630964528087272 caf TRACE actor0 139860295833344 caf.stateful_actor<State,%20Base> on_exit stateful_actor.hpp:57 ENTRY 
1500630964528106762 caf TRACE actor0 139860295833344 Base> on_exit stateful_actor.hpp:57 EXIT
1500630964528116564 caf TRACE actor0 139860295833344 caf.io.abstract_broker cleanup abstract_broker.cpp:63 ENTRY reason = none
1500630964528121542 caf TRACE actor0 139860295833344 caf.io.abstract_broker close_all abstract_broker.cpp:193 ENTRY 
1500630964528125681 caf TRACE actor0 139860295833344 caf.io.abstract_broker close_all abstract_broker.cpp:193 EXIT
1500630964528131376 caf TRACE actor0 139860295833344 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = none
1500630964528137452 caf TRACE actor0 139860295833344 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = none
1500630964528145890 caf INFO  actor0 139860295833344 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 5, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = none
1500630964528153126 caf TRACE actor0 139860295833344 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964528157748 se-0001 DEBUG actor0 139860295833344 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = none
1500630964528161731 caf TRACE actor0 139860295833344 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964528165772 caf TRACE actor0 139860295833344 caf.io.abstract_broker cleanup abstract_broker.cpp:63 EXIT
1500630964528171613 caf TRACE actor0 139860295833344 caf.io.middleman operator() middleman.cpp:278 EXIT
1500630964528177646 caf TRACE actor0 139860295833344 caf.io.network.pipe_reader handle_event default_multiplexer.cpp:1039 EXIT
1500630964528182076 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle_socket_event default_multiplexer.cpp:669 EXIT
1500630964528188210 caf DEBUG actor0 139860295833344 caf.io.network.default_multiplexer run default_multiplexer.cpp:325 epoll_wait() on  shadow_ = 1  sockets reported  presult = 1  event(s)
1500630964528193467 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle_socket_event default_multiplexer.cpp:669 ENTRY fd = 4, mask = 1
1500630964528197953 caf TRACE actor0 139860295833344 caf.io.network.pipe_reader handle_event default_multiplexer.cpp:1039 ENTRY op = read
1500630964528206339 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer close_pipe default_multiplexer.cpp:663 ENTRY 
1500630964528213117 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer del default_multiplexer.cpp:623 ENTRY op = read, fd = 4
1500630964528221598 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer new_event default_multiplexer.hpp:323 ENTRY op = read, fd = 4, old_bf = 1
1500630964528227364 caf DEBUG actor0 139860295833344 caf.io.network.default_multiplexer new_event default_multiplexer.hpp:348 added handler: fd = 4, op = read
1500630964528235297 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer new_event default_multiplexer.hpp:323 EXIT
1500630964528239604 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer del default_multiplexer.cpp:623 EXIT
1500630964528243968 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer close_pipe default_multiplexer.cpp:663 EXIT
1500630964528248863 caf TRACE actor0 139860295833344 caf.io.network.pipe_reader handle_event default_multiplexer.cpp:1039 EXIT
1500630964528252740 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle_socket_event default_multiplexer.cpp:669 EXIT
1500630964528259192 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle default_multiplexer.cpp:355 ENTRY e.fd =  e.fd = 4 , mask =  e.mask = 0
1500630964528264095 caf DEBUG actor0 139860295833344 caf.io.network.default_multiplexer handle default_multiplexer.cpp:373 attempt to remove socket  e.fd = 4  from epoll
1500630964528269804 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer handle default_multiplexer.cpp:355 EXIT
1500630964528273984 caf TRACE actor0 139860295833344 caf.io.network.default_multiplexer run default_multiplexer.cpp:319 EXIT
1500630964528278140 caf TRACE actor0 139860295833344 caf.io.middleman operator() middleman.cpp:266 EXIT
1500630964528321871 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 7 ; ARGS = (actor_config)
1500630964528330305 se-0001 DEBUG actor7 139860382881568 caf.local_actor initialize local_actor.cpp:177 INIT ; NAME = scoped_actor ; HIDDEN = true
1500630964528354126 caf TRACE actor7 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:124 ENTRY *ptr = mailbox_element(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, message_id(0), (exit_msg(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(5, 'exit'))))
1500630964528367123 se-0001 DEBUG actor7 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:125 SEND ; TO = 6@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; STAGES = [] ; CONTENT = (exit_msg(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(5, 'exit')))
1500630964528371967 se-0001 DEBUG actor7 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:154 ACCEPT
1500630964528376086 caf TRACE actor7 139860382881568 caf.scheduled_actor enqueue scheduled_actor.cpp:124 EXIT
1500630964528383479 caf TRACE actor7 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 ENTRY 
1500630964528388202 caf DEBUG actor7 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:52 cannot attach functor to terminated actor: call immediately
1500630964528392119 caf TRACE actor7 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 EXIT
1500630964528438730 caf TRACE actor7 139860382881568 caf.blocking_actor receive_impl blocking_actor.cpp:317 ENTRY mid = message_id(0)
1500630964528477167 caf TRACE actor6 139860285343488 caf.detail.private_thread run private_thread.cpp:40 ENTRY 
1500630964528496253 caf TRACE actor6 139860285343488 caf.scheduled_actor activate scheduled_actor.cpp:503 ENTRY 
1500630964528512575 caf TRACE actor6 139860285343488 caf.typed_event_based_actor<caf.typed_mpi<caf.detail.type_list<caf make_behavior middleman_actor.cpp:88 ENTRY 
1500630964528521150 caf TRACE actor6 139860285343488 caf.io.{anonymous}.middleman_actor_impl make_behavior middleman_actor.cpp:88 EXIT
1500630964528529551 caf DEBUG actor6 139860285343488 caf.typed_event_based_actor<%20<template-parameter-1-1>%20> initialize typed_event_based_actor.hpp:77 make_behavior() did return a valid behavior
1500630964528537415 se-0001 DEBUG actor6 139860285343488 caf.local_actor initialize local_actor.cpp:177 INIT ; NAME = middleman_actor ; HIDDEN = true
1500630964528544147 caf DEBUG actor6 139860285343488 caf.scheduled_actor activate scheduled_actor.cpp:524 initialized actor: name() = "middleman_actor"
1500630964528547994 caf TRACE actor6 139860285343488 caf.scheduled_actor activate scheduled_actor.cpp:503 EXIT
1500630964528574103 caf TRACE actor6 139860285343488 caf.scheduled_actor reactivate scheduled_actor.cpp:551 ENTRY x = mailbox_element(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, message_id(0), (exit_msg(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(5, 'exit'))))
1500630964528586780 caf TRACE actor6 139860285343488 caf.scheduled_actor consume scheduled_actor.cpp:379 ENTRY x = mailbox_element(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, message_id(0), (exit_msg(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(5, 'exit'))))
1500630964528598509 se-0001 DEBUG actor6 139860285343488 caf.scheduled_actor consume scheduled_actor.cpp:381 RECEIVE ; FROM = 7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; STAGES = [] ; CONTENT = (exit_msg(7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(5, 'exit')))
1500630964528612700 caf TRACE actor6 139860285343488 caf.monitorable_actor link_impl monitorable_actor.cpp:120 ENTRY op = remove_link, other = *<unprintable>
1500630964528619101 caf TRACE actor6 139860285343488 caf.monitorable_actor remove_link_impl monitorable_actor.cpp:186 ENTRY x = *<unprintable>
1500630964528625609 caf TRACE actor6 139860285343488 size_t%20caf.monitorable_actor detach_impl monitorable_actor.cpp:208 ENTRY 
1500630964528630411 caf TRACE actor6 139860285343488 size_t%20caf.monitorable_actor detach_impl monitorable_actor.cpp:208 ENTRY 
1500630964528637673 caf DEBUG actor6 139860285343488 size_t%20caf.monitorable_actor detach_impl monitorable_actor.cpp:210 invalid ptr
1500630964528642363 caf TRACE actor6 139860285343488 caf.monitorable_actor detach_impl monitorable_actor.cpp:208 EXIT
1500630964528646304 caf TRACE actor6 139860285343488 caf.monitorable_actor detach_impl monitorable_actor.cpp:208 EXIT
1500630964528650737 caf TRACE actor6 139860285343488 caf.monitorable_actor remove_link_impl monitorable_actor.cpp:186 EXIT
1500630964528654947 caf TRACE actor6 139860285343488 caf.monitorable_actor link_impl monitorable_actor.cpp:120 EXIT
1500630964528659749 caf DEBUG actor6 139860285343488 caf.scheduled_actor consume scheduled_actor.cpp:418 handled system message
1500630964528663749 caf TRACE actor6 139860285343488 caf.scheduled_actor consume scheduled_actor.cpp:379 EXIT
1500630964528667742 caf DEBUG actor6 139860285343488 caf.scheduled_actor finalize scheduled_actor.cpp:599 actor either has no behavior or has set an exit reason
1500630964528672652 caf TRACE actor6 139860285343488 caf.io.{anonymous}.middleman_actor_impl on_exit middleman_actor.cpp:67 ENTRY 
1500630964528685868 caf TRACE actor6 139860285343488 caf.io.{anonymous}.middleman_actor_impl on_exit middleman_actor.cpp:67 EXIT
1500630964528696649 caf TRACE actor6 139860285343488 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = error(5, 'exit')
1500630964528703576 caf TRACE actor6 139860285343488 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = error(5, 'exit')
1500630964528712590 caf INFO  actor6 139860285343488 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 6, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = error(5, 'exit')
1500630964528722171 caf TRACE actor6 139860285343488 caf.blocking_actor enqueue blocking_actor.cpp:66 ENTRY *ptr = mailbox_element(0@invalid-node, message_id(0), ('waitFor'))
1500630964528734932 se-0001 DEBUG actor6 139860285343488 caf.blocking_actor enqueue blocking_actor.cpp:67 SEND ; TO = 7@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = ('waitFor')
1500630964528741968 se-0001 DEBUG actor6 139860285343488 caf.blocking_actor enqueue blocking_actor.cpp:78 ACCEPT
1500630964528746252 caf TRACE actor6 139860285343488 caf.blocking_actor enqueue blocking_actor.cpp:66 EXIT
1500630964528750792 caf TRACE actor6 139860285343488 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964528756599 se-0001 DEBUG actor6 139860285343488 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = error(5, 'exit')
1500630964528760307 caf TRACE actor6 139860285343488 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964528764088 caf DEBUG actor6 139860285343488 caf.scheduled_actor reactivate scheduled_actor.cpp:561 actor finalized
1500630964528767979 caf TRACE actor6 139860285343488 caf.scheduled_actor reactivate scheduled_actor.cpp:551 EXIT
1500630964528774763 caf TRACE actor6 139860285343488 caf.detail.private_thread run private_thread.cpp:40 EXIT
1500630964528791675 se-0001 DEBUG actor7 139860382881568 caf.blocking_actor receive_impl blocking_actor.cpp:347 RECEIVE ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = ('waitFor')
1500630964528802014 caf TRACE actor7 139860382881568 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 ENTRY x = <empty-message>
1500630964528810336 caf DEBUG actor7 139860382881568 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:83 suppress response message: invalid response promise
1500630964528815937 caf TRACE actor7 139860382881568 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 EXIT
1500630964528821836 caf TRACE actor7 139860382881568 caf.blocking_actor receive_impl blocking_actor.cpp:317 EXIT
1500630964528838178 caf TRACE actor7 139860382881568 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = none
1500630964528848358 caf TRACE actor7 139860382881568 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = none
1500630964528863717 caf INFO  actor7 139860382881568 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 7, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = none
1500630964528868301 caf TRACE actor7 139860382881568 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964528873669 se-0001 DEBUG actor7 139860382881568 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = none
1500630964528877869 caf TRACE actor7 139860382881568 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964528884932 caf TRACE actor0 139860382881568 caf.io.middleman stop middleman.cpp:276 EXIT
1500630964530216533 caf TRACE actor0 139860382881568 caf.scheduler.abstract_coordinator stop_actors abstract_coordinator.cpp:343 ENTRY 
1500630964530229577 se-0001 DEBUG actor0 139860382881568 caf make_actor make_actor.hpp:37 SPAWN ; ID = 8 ; ARGS = (actor_config)
1500630964530236514 se-0001 DEBUG actor8 139860382881568 caf.local_actor initialize local_actor.cpp:177 INIT ; NAME = scoped_actor ; HIDDEN = true
1500630964530244547 caf TRACE actor8 139860382881568 caf anon_send_exit send.hpp:86 ENTRY dest = 3@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = user_shutdown
1500630964530257942 caf TRACE actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:66 ENTRY *ptr = mailbox_element(0@invalid-node, message_id(0), (exit_msg(3@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964530269488 se-0001 DEBUG actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:67 SEND ; TO = 3@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(3@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964530275653 se-0001 DEBUG actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:78 ACCEPT
1500630964530279461 caf TRACE actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:66 EXIT
1500630964530283418 caf TRACE actor8 139860382881568 caf anon_send_exit send.hpp:86 EXIT
1500630964530303046 caf TRACE actor8 139860382881568 caf anon_send_exit send.hpp:86 ENTRY dest = 4@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = user_shutdown
1500630964530314557 caf TRACE actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:66 ENTRY *ptr = mailbox_element(0@invalid-node, message_id(0), (exit_msg(4@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit'))))
1500630964530325256 se-0001 DEBUG actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:67 SEND ; TO = 4@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(4@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964530331216 se-0001 DEBUG actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:78 ACCEPT
1500630964530334996 caf TRACE actor8 139860382881568 caf.blocking_actor enqueue blocking_actor.cpp:66 EXIT
1500630964530338632 caf TRACE actor8 139860382881568 caf anon_send_exit send.hpp:86 EXIT
1500630964530344024 caf TRACE actor8 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 ENTRY 
1500630964530348183 caf DEBUG actor8 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:52 cannot attach functor to terminated actor: call immediately
1500630964530352254 caf TRACE actor8 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 EXIT
1500630964530356279 caf TRACE actor8 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 ENTRY 
1500630964530359851 caf DEBUG actor8 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:52 cannot attach functor to terminated actor: call immediately
1500630964530363404 caf TRACE actor8 139860382881568 caf.monitorable_actor attach monitorable_actor.cpp:41 EXIT
1500630964530373318 caf TRACE actor8 139860382881568 caf.blocking_actor receive_impl blocking_actor.cpp:317 ENTRY mid = message_id(0)
1500630964530416097 se-0001 DEBUG actor3 139860316813056 caf.blocking_actor receive_impl blocking_actor.cpp:347 RECEIVE ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(3@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964530428263 caf TRACE actor3 139860316813056 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 ENTRY x = <empty-message>
1500630964530437963 caf DEBUG actor3 139860316813056 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:83 suppress response message: invalid response promise
1500630964530443288 caf TRACE actor3 139860316813056 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 EXIT
1500630964530450149 caf TRACE actor3 139860316813056 caf.blocking_actor receive_impl blocking_actor.cpp:317 EXIT
1500630964530459960 caf TRACE actor3 139860316813056 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = error(4, 'exit')
1500630964530467021 caf TRACE actor3 139860316813056 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = error(4, 'exit')
1500630964530477006 caf INFO  actor3 139860316813056 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 3, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = error(4, 'exit')
1500630964530486999 caf TRACE actor3 139860316813056 caf.blocking_actor enqueue blocking_actor.cpp:66 ENTRY *ptr = mailbox_element(0@invalid-node, message_id(0), ('waitFor'))
1500630964530495137 se-0001 DEBUG actor3 139860316813056 caf.blocking_actor enqueue blocking_actor.cpp:67 SEND ; TO = 8@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = ('waitFor')
1500630964530502135 se-0001 DEBUG actor3 139860316813056 caf.blocking_actor enqueue blocking_actor.cpp:78 ACCEPT
1500630964530506259 caf TRACE actor3 139860316813056 caf.blocking_actor enqueue blocking_actor.cpp:66 EXIT
1500630964530510668 caf TRACE actor3 139860316813056 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964530516099 se-0001 DEBUG actor3 139860316813056 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = error(4, 'exit')
1500630964530522690 caf TRACE actor3 139860316813056 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964530566305 se-0001 DEBUG actor8 139860382881568 caf.blocking_actor receive_impl blocking_actor.cpp:347 RECEIVE ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = ('waitFor')
1500630964530575337 caf TRACE actor8 139860382881568 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 ENTRY x = <empty-message>
1500630964530580138 caf DEBUG actor8 139860382881568 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:83 suppress response message: invalid response promise
1500630964530584482 caf TRACE actor8 139860382881568 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 EXIT
1500630964530602610 se-0001 DEBUG actor4 139860306323200 caf.blocking_actor receive_impl blocking_actor.cpp:347 RECEIVE ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = (exit_msg(4@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, error(4, 'exit')))
1500630964530609369 caf TRACE actor4 139860306323200 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 ENTRY x = <empty-message>
1500630964530614384 caf DEBUG actor4 139860306323200 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:83 suppress response message: invalid response promise
1500630964530618754 caf TRACE actor4 139860306323200 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 EXIT
1500630964530623874 caf TRACE actor4 139860306323200 caf.blocking_actor receive_impl blocking_actor.cpp:317 EXIT
1500630964530633971 caf TRACE actor4 139860306323200 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = error(4, 'exit')
1500630964530640835 caf TRACE actor4 139860306323200 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = error(4, 'exit')
1500630964530649815 caf INFO  actor4 139860306323200 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 4, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = error(4, 'exit')
1500630964530657049 caf TRACE actor4 139860306323200 caf.blocking_actor enqueue blocking_actor.cpp:66 ENTRY *ptr = mailbox_element(0@invalid-node, message_id(0), ('waitFor'))
1500630964530664910 se-0001 DEBUG actor4 139860306323200 caf.blocking_actor enqueue blocking_actor.cpp:67 SEND ; TO = 8@C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395 ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = ('waitFor')
1500630964530671386 se-0001 DEBUG actor4 139860306323200 caf.blocking_actor enqueue blocking_actor.cpp:78 ACCEPT
1500630964530675534 caf TRACE actor4 139860306323200 caf.blocking_actor enqueue blocking_actor.cpp:66 EXIT
1500630964530679695 caf TRACE actor4 139860306323200 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964530685152 se-0001 DEBUG actor4 139860306323200 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = error(4, 'exit')
1500630964530688881 caf TRACE actor4 139860306323200 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964530736348 se-0001 DEBUG actor8 139860382881568 caf.blocking_actor receive_impl blocking_actor.cpp:347 RECEIVE ; FROM = 0@invalid-node ; STAGES = [] ; CONTENT = ('waitFor')
1500630964530744807 caf TRACE actor8 139860382881568 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 ENTRY x = <empty-message>
1500630964530749592 caf DEBUG actor8 139860382881568 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:83 suppress response message: invalid response promise
1500630964530753901 caf TRACE actor8 139860382881568 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:51 EXIT
1500630964530759158 caf TRACE actor8 139860382881568 caf.blocking_actor receive_impl blocking_actor.cpp:317 EXIT
1500630964530766084 caf TRACE actor8 139860382881568 caf.local_actor cleanup local_actor.cpp:181 ENTRY fail_state = none
1500630964530771618 caf TRACE actor8 139860382881568 caf.monitorable_actor cleanup monitorable_actor.cpp:64 ENTRY reason = none
1500630964530779671 caf INFO  actor8 139860382881568 caf.monitorable_actor cleanup monitorable_actor.cpp:81 cleanup id() = 8, node() = C3DBDF7EF5813937679A79AC3B807CD1A5120000#26395, reason = none
1500630964530783539 caf TRACE actor8 139860382881568 caf.monitorable_actor cleanup monitorable_actor.cpp:64 EXIT
1500630964530789589 se-0001 DEBUG actor8 139860382881568 caf.local_actor cleanup local_actor.cpp:189 TERMINATE ; REASON = none
1500630964530797009 caf TRACE actor8 139860382881568 caf.local_actor cleanup local_actor.cpp:181 EXIT
1500630964530805975 caf TRACE actor0 139860382881568 caf.scheduler.abstract_coordinator stop_actors abstract_coordinator.cpp:343 EXIT
1500630964530989296 caf INFO  actor0 139860382881568 caf.logger stop logger.cpp:447 EOF
